(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{314:function(t,e,a){"use strict";a.r(e);var v=a(14),_=Object(v.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"项目结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目结构"}},[t._v("#")]),t._v(" 项目结构")]),t._v(" "),e("p",[t._v("本文档介绍了您从"),e("code",[t._v("GitHub")]),t._v("拷贝下来的项目结构,方便您更好的了解每个模块的作用,以便进行二次开发")]),t._v(" "),e("h2",{attrs:{id:"根模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#根模块"}},[t._v("#")]),t._v(" 根模块")]),t._v(" "),e("p",[t._v("位于"),e("code",[t._v("/src/main/java/io/github/mczzcs/")]),t._v("下")]),t._v(" "),e("blockquote",[e("p",[t._v("对应JAVA包路径"),e("code",[t._v("io.github.mczzcs")])])]),t._v(" "),e("p",[t._v("该目录下主要有三个类")]),t._v(" "),e("ul",[e("li",[t._v("CompileManager : 编译管理器,负责调取ConsoleModel类的各种参数状态并控制编译器编译脚本")]),t._v(" "),e("li",[t._v("ConsoleModel : 命令行处理器,负责接受解析后的命令行参数,并进行对应输出或启动编译管理器")]),t._v(" "),e("li",[t._v("Main : 程序入口点,OpenEX从这里启动,该类也存储了所有关键字与保留字")])]),t._v(" "),e("h2",{attrs:{id:"编译器-前端"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编译器-前端"}},[t._v("#")]),t._v(" 编译器 - 前端")]),t._v(" "),e("p",[t._v("位于"),e("code",[t._v("io.github.mczzcs.compile")]),t._v("包下")]),t._v(" "),e("p",[t._v("该目录下主要有5个类")]),t._v(" "),e("h3",{attrs:{id:"compiler"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#compiler"}},[t._v("#")]),t._v(" Compiler")]),t._v(" "),e("p",[t._v("代表一个OpenEX标准前端编译器,负责调控各个解析模块,将脚本解析成执行节点"),e("br"),t._v("\n位于"),e("code",[t._v("io.github.mczzcs.compile.Compiler")]),t._v("下")]),t._v(" "),e("h4",{attrs:{id:"成员变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#成员变量"}},[t._v("#")]),t._v(" 成员变量")]),t._v(" "),e("ul",[e("li",[t._v("String filename; 存储编译的脚本名称")]),t._v(" "),e("li",[t._v("ArrayList<ASTNode> bcs; 存储脚本编译后的执行节点 "),e("code",[t._v("编译期间该列表为空")])]),t._v(" "),e("li",[t._v("ArrayList<String> libname; "),e("code",[t._v("include")]),t._v("语句符号表,存储已经导入的库名,方便函数调用表达式解析")]),t._v(" "),e("li",[t._v("ArrayList<String> value_names; 全局变量符号表,存储脚本中定义的全局变量")]),t._v(" "),e("li",[t._v("ArrayList<String> array_names; 全局数组符号表,协助全局变量符号表参与解析变量属性")])]),t._v(" "),e("h3",{attrs:{id:"exprssionparsing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exprssionparsing"}},[t._v("#")]),t._v(" ExprssionParsing")]),t._v(" "),e("p",[t._v("OpenEX的新一代混合型表达式解析器,其架构最初在"),e("code",[t._v("OpenEXAST")]),t._v("版本中开发出来,一直沿用至今")]),t._v(" "),e("blockquote",[e("p",[t._v("其内部采用中转后缀表达式解析方式,对非双目运算符解析能力较差,但可以解析布尔表达式与算术表达式混合型的表达式")])]),t._v(" "),e("h4",{attrs:{id:"成员方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#成员方法"}},[t._v("#")]),t._v(" 成员方法")]),t._v(" "),e("ul",[e("li",[t._v("transitSuffix ; 初步进行"),e("code",[t._v("Token")]),t._v("串的中转后缀解析,返回一个解析后的"),e("code",[t._v("Token")]),t._v("串")]),t._v(" "),e("li",[t._v("calculate ; 将解析后的"),e("code",[t._v("Token")]),t._v("串进一步解析成执行节点")])]),t._v(" "),e("h3",{attrs:{id:"lexicalanalysus"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lexicalanalysus"}},[t._v("#")]),t._v(" LexicalAnalysus")]),t._v(" "),e("p",[t._v("OpenEX标准词法解析器,其架构最初在"),e("code",[t._v("OpenEX:JavaEdition")]),t._v("版本中开发出来,经不断升级一直沿用至今")]),t._v(" "),e("blockquote",[e("p",[t._v("其内部采用自动机方式逐个抽取源代码字符,并分割成"),e("code",[t._v("Token")]),t._v("词素后组合成列表返回")])]),t._v(" "),e("h4",{attrs:{id:"成员方法-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#成员方法-2"}},[t._v("#")]),t._v(" 成员方法")]),t._v(" "),e("ul",[e("li",[t._v("getTokens ; 返回解析后的"),e("code",[t._v("Token")]),t._v("列表")]),t._v(" "),e("li",[e("code",[t._v("private")]),t._v(" lex ; 返回单个字符解析后的"),e("code",[t._v("Token")]),t._v("词素")])]),t._v(" "),e("h3",{attrs:{id:"其他"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),e("ul",[e("li",[t._v("Token ; 代表一个词素")]),t._v(" "),e("li",[t._v("TokenX ; 负责表达式中间缓存,与词法分析阶段无关")])]),t._v(" "),e("h2",{attrs:{id:"编译器-语法分析器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编译器-语法分析器"}},[t._v("#")]),t._v(" 编译器 - 语法分析器")]),t._v(" "),e("h3",{attrs:{id:"parser"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parser"}},[t._v("#")]),t._v(" Parser")]),t._v(" "),e("p",[t._v("位于"),e("code",[t._v("io.github.mczzcs.compile.parser.Parser")]),t._v("中")]),t._v(" "),e("p",[t._v("同样采用自动机方式逐个提取词素并拼接成语句,然后识别语句类型并传入对应子分析器进行详细解析")]),t._v(" "),e("h4",{attrs:{id:"subparser"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#subparser"}},[t._v("#")]),t._v(" SubParser")]),t._v(" "),e("p",[t._v("位于"),e("code",[t._v("io.github.mczzcs.compile.parser.Parser.SubParser")]),t._v("中")]),t._v(" "),e("p",[e("code",[t._v("Parser")]),t._v("类的子类,通常用于分割语句块,与Parser架构相差无几,但其更多用于函数体和语句体的解析")]),t._v(" "),e("h2",{attrs:{id:"编译器-语法-语义混合分析器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编译器-语法-语义混合分析器"}},[t._v("#")]),t._v(" 编译器 - 语法/语义混合分析器")]),t._v(" "),e("p",[t._v("位于"),e("code",[t._v("io.github.mczzcs.compile.parser")]),t._v("中"),e("br"),t._v("\n对应语句解析后将返回继承于"),e("code",[t._v("ASTNode")]),t._v("的运行时执行节点")]),t._v(" "),e("blockquote",[e("p",[t._v("所有混合分析器都实现"),e("code",[t._v("BaseParser")]),t._v("接口的"),e("code",[t._v("eval")]),t._v("方法")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("类名")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("功能")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("备注")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("BackParser")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("对循环内的"),e("code",[t._v("break")]),t._v("语句进行解析")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("BufParser")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("表达式解析缓存")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("无解析功能")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ContinueParser")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("对循环内"),e("code",[t._v("continue")]),t._v("语句进行解析")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ElseIfParser")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("对"),e("code",[t._v("elif")]),t._v("语句的解析")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ExpParser")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("对表达式进行解析")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("解析功能由"),e("code",[t._v("ExpressionParser")]),t._v("实现")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ForParser")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("对"),e("code",[t._v("for")]),t._v("语句进行解析")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("FunctionParser")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("对"),e("code",[t._v("function")]),t._v("语句的定义部分进行解析")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("FunctionXParser")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("对"),e("code",[t._v("function")]),t._v("语句的函数体部分进行解析")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("IfParser")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("对"),e("code",[t._v("if")]),t._v("语句进行解析")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("IncludeParser")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("对"),e("code",[t._v("include")]),t._v("语句进行解析")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("InvokeParser")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("对函数调用表达式进行解析")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ReturnParser")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("对"),e("code",[t._v("return")]),t._v("语句进行解析")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ValueParser")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("对变量定义语句进行解析")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("WhileParser")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("对"),e("code",[t._v("while")]),t._v("语句进行解析")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])])])]),t._v(" "),e("h2",{attrs:{id:"执行节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行节点"}},[t._v("#")]),t._v(" 执行节点")]),t._v(" "),e("p",[t._v("位于"),e("code",[t._v("io.github.mczzcs.exe.code")]),t._v("中"),e("br"),t._v("\nOpenEX前端编译器的输出结果,该结构可以被OpenEX运行时识别并执行,或由"),e("code",[t._v("StamonVM_IR")]),t._v("编译器进一步交叉编译成StamonVM字节码")]),t._v(" "),e("blockquote",[e("p",[t._v("所有执行节点都实现"),e("code",[t._v("io.github.mczzcs.exe.code.ASTNode")]),t._v("接口")])]),t._v(" "),e("h3",{attrs:{id:"操作数执行节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#操作数执行节点"}},[t._v("#")]),t._v(" 操作数执行节点")]),t._v(" "),e("p",[t._v("该类型的执行节点都位于"),e("code",[t._v("io.github.mczzcs.exe.code.opcode")]),t._v("下"),e("br"),t._v("\n该类型的节点大部分是由表达式转换后的结果,其功能可以控制操作栈和实现运算")]),t._v(" "),e("blockquote",[e("p",[t._v("计算结果将压回操作栈,表达式求值功能以此实现")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("类名")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("功能")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("备注")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("AddMovNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将栈顶两元素相加后的值赋值到第二个元素")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("AddNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将栈顶两元素相加")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("AndNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将栈顶两元素与比较")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("BigEquNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将栈顶两元素进行大于等于比较")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("BigNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将栈顶两元素进行大于比较")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("DivMovNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将栈顶两元素相除后赋值到第二个元素")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("DivNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将栈顶两元素相除")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("DivXMovNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将栈顶两元素取余后赋值到第二个元素")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("DivXNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将栈顶两元素取余")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("EquNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将栈顶两元素比较")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("LessEquNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将栈顶两元素小于等于比较")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("LessNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将栈顶两元素小于比较")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("MovNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将栈顶第一个元素的值赋值到第二个元素")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("MulMovNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将栈顶两元素相乘后的值赋值到第二个元素")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("MulNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将栈顶两元素相乘")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("NotNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将栈顶元素取反")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("OrNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将栈顶两元素或比较")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("PushNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将指定元素压入操作栈")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("SubMovNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将栈顶两元素相减后的值赋值到第二个元素")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("SubNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将栈顶两元素相减")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])])])]),t._v(" "),e("h3",{attrs:{id:"结构体执行节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结构体执行节点"}},[t._v("#")]),t._v(" 结构体执行节点")]),t._v(" "),e("p",[t._v("该类型的执行节点都位于"),e("code",[t._v("io.github.mczzcs.exe.code.struct")]),t._v("下"),e("br"),t._v("\n该类型的节点大部分是由语句转换后的结果,通常具有1个或多个子节点")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("类名")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("功能")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("备注")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("GroupASTNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("多个执行节点的集合")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("表达式或代码块解析后的结果")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("InvokeASTNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("调用指定函数")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("LoadArrayNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("向指定变量池开辟一块数组类型内存区域")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("LoadValueNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("向指定变量吃开辟一块变量类型内存区域")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("MovVarNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("重赋值指定变量")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("NulASTNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("空操作")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ReturnNode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("弹出调用栈栈顶栈帧,并将返回值压入上一级栈帧的操作栈")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])])])]),t._v(" "),e("h2",{attrs:{id:"运行时-核心"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行时-核心"}},[t._v("#")]),t._v(" 运行时 - 核心")]),t._v(" "),e("h3",{attrs:{id:"执行引擎"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行引擎"}},[t._v("#")]),t._v(" 执行引擎")]),t._v(" "),e("p",[t._v("位于"),e("code",[t._v("io.github.mczzcs.exe.core.Executor")]),e("br"),t._v("\n可以识别相应执行节点并执行对应操作")]),t._v(" "),e("blockquote",[e("p",[t._v("在旧版中其内部通常包含一个操作栈,但是新版中栈帧操作栈替代了该功能")])]),t._v(" "),e("h3",{attrs:{id:"运行库加载器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行库加载器"}},[t._v("#")]),t._v(" 运行库加载器")]),t._v(" "),e("p",[t._v("位于"),e("code",[t._v("io.github.mczzcs.exe.core.LibraryLoader")]),e("br"),t._v("\n加载位于"),e("code",[t._v("io.github.mczzcs.exe.lib")]),t._v("下的运行库或扩展库")]),t._v(" "),e("blockquote",[e("p",[t._v("详细运行库接口文档请前往 "),e("a",{attrs:{href:"/zh/api"}},[t._v("Runtime API")])])]),t._v(" "),e("h3",{attrs:{id:"栈帧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#栈帧"}},[t._v("#")]),t._v(" 栈帧")]),t._v(" "),e("p",[t._v("其有三种类型")]),t._v(" "),e("ul",[e("li",[t._v("LoaderStackFrame : 加载器栈帧,作为脚本根节点或线程"),e("code",[t._v("run")]),t._v("起始")]),t._v(" "),e("li",[t._v("RuntimeStackFrame : 代表运行库函数的调用栈栈帧")]),t._v(" "),e("li",[t._v("StackFrame : 代表用户脚本所定义函数的调用栈栈帧")])]),t._v(" "),e("div",{staticClass:"custom-block danger"},[e("p",{staticClass:"custom-block-title"},[t._v("异常")]),t._v(" "),e("p",[t._v("当脚本代码发生运行时异常并没有对应的异常处理程序正确对其进行处理时,在输出异常类型等基本信息的同时,新版OpenEX还会打印调用栈结构,如下所示")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("CallStackStruct:\n    at "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("脚本文件名"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" loader.boot "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Script Loader"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    at "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("脚本文件名"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 脚本调用ID.用户定义函数 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("User Script"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    at "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("脚本文件名"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 扩展库调用ID,扩展库函数名 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Runtime Function"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("实际调用栈结构可能会依照脚本代码结构有所差异,请以控制台实际打印信息为准")])]),t._v(" "),e("h2",{attrs:{id:"运行时-线程管理器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行时-线程管理器"}},[t._v("#")]),t._v(" 运行时 - 线程管理器")]),t._v(" "),e("p",[t._v("位于"),e("code",[t._v("io.github.mczzcs.exe.thread")]),e("br"),t._v("\n是OpenEX脚本多线程和异步执行功能的实现")]),t._v(" "),e("h3",{attrs:{id:"threadmanager"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#threadmanager"}},[t._v("#")]),t._v(" ThreadManager")]),t._v(" "),e("p",[t._v("线程管理,调度的实现. 也存储全部用户脚本定义的全局变量和函数")]),t._v(" "),e("h3",{attrs:{id:"threadtask"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#threadtask"}},[t._v("#")]),t._v(" ThreadTask")]),t._v(" "),e("p",[t._v("线程调度单元,表示OpenEX的一条线程,受"),e("code",[t._v("ThreadManager")]),t._v("管理")])])}),[],!1,null,null,null);e.default=_.exports}}]);